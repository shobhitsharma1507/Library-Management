/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controls;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 *
 * @author Shobhit
 */
public class DatePanel extends javax.swing.JPanel {

    /**
     * Creates new form DatePanel
     */
    private GregorianCalendar gcal;

    public DatePanel() {
        initComponents();
        gcal = new GregorianCalendar();
        bindYearCombo();
    }

    public void bindYearCombo() {
        jcbYear.removeAllItems();
        jcbDate.addItem("--DATE--");
        jcbMonth.addItem("--MONTH");
        jcbYear.addItem("--YEAR--");
        int current_year = gcal.get(Calendar.YEAR);
        for (int i = 2000; i <= current_year; i++) {
            jcbYear.addItem(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbMonth = new javax.swing.JComboBox<>();
        jcbYear = new javax.swing.JComboBox<>();
        jcbDate = new javax.swing.JComboBox<>();

        jcbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMonthItemStateChanged(evt);
            }
        });

        jcbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbYearItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jcbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbYearItemStateChanged
        int current_selected_month = jcbMonth.getSelectedIndex();
        int current_selected_date = jcbDate.getSelectedIndex();
        jcbMonth.removeAllItems();
        jcbMonth.addItem("--MONTH--");
        if (jcbYear.getSelectedIndex() > 0) {
            int selected_year = Integer.parseInt(jcbYear.getSelectedItem().toString());
            Months month[] = Months.values();
            int begin = 0;
            int end = month.length - 1;
            if (selected_year == gcal.get(Calendar.YEAR)) {
                end = gcal.get(Calendar.MONTH);
            }
            for (int i = begin; i <= end; i++) {
                jcbMonth.addItem(month[i]);
            }
        }
        if (current_selected_month < jcbMonth.getItemCount()) {
            jcbMonth.setSelectedIndex(current_selected_month);
            if (current_selected_date < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(current_selected_date);
            }
        }
    }//GEN-LAST:event_jcbYearItemStateChanged

    private void jcbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMonthItemStateChanged
        int current_selected_date_index = jcbDate.getSelectedIndex();
        jcbDate.removeAllItems();
        jcbDate.addItem("--Date--");
        if (jcbMonth.getSelectedIndex() > 0) {
            int selected_year = Integer.parseInt(jcbYear.getSelectedItem().toString());
            Months selected_month = (Months) jcbMonth.getSelectedItem();
            int begin = 1;
            int end = selected_month.getDays();
            if (selected_month == Months.February) {
                if (gcal.isLeapYear(selected_year)) {
                    end = 29;
                }
            }
            int current_month = gcal.get(Calendar.MONTH);
            int current_year = gcal.get(Calendar.YEAR);
            if (selected_year == current_year && current_month == selected_month.ordinal()) {
                end = gcal.get(Calendar.DATE);
            }
            for (int date = begin; date <= end; date++) {
                jcbDate.addItem(date);
            }
            if (current_selected_date_index < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(current_selected_date_index);
            }
        }
    }//GEN-LAST:event_jcbMonthItemStateChanged

    public Date getDate() {
        Date selected_date = null;
        try {
            if (jcbYear.getSelectedIndex() > 0 && jcbMonth.getSelectedIndex() > 0 && jcbDate.getSelectedIndex() > 0) {
                int year = Integer.parseInt(jcbYear.getSelectedItem().toString());
                int month = jcbMonth.getSelectedIndex();
                int date = jcbDate.getSelectedIndex();
                String date_string = year + "-" + month + "-" + date;
                selected_date = Date.valueOf(date_string);
            }
        } catch (Exception ex) {
        }
        return selected_date;
    }

    public void setDate(Date date_value) {
        try {
            String values[] = date_value.toString().split("-");
            int year = Integer.parseInt(values[0]);
            int month = Integer.parseInt(values[1]);
            int date = Integer.parseInt(values[2]);
            for (int index = 1; index < jcbYear.getItemCount(); index++) {
                int year_value = Integer.parseInt(jcbYear.getItemAt(index).toString());
                if (year_value == year) {
                    jcbYear.setSelectedIndex(index);
                    break;
                }
            }
            jcbMonth.setSelectedIndex(month);
            jcbDate.setSelectedIndex(date);
        } catch (Exception ex) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> jcbDate;
    private javax.swing.JComboBox<Object> jcbMonth;
    private javax.swing.JComboBox<Object> jcbYear;
    // End of variables declaration//GEN-END:variables
}
